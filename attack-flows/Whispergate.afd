{"namespace":"flow-1","canvas":{"cameraX":269.3333435058594,"cameraY":1061.3333740234375,"padding":45,"pageSizeX":800,"pageSizeY":800},"nodes":[{"id":"1","type":"action","x0":1035.5999970436096,"y0":916.9999961853027,"x1":1441,"y1":1216,"payload":{"name":"T1134 Access Token Manipulation: CVE-2021-32648 Vulnerability","description":"The attacker accesses OctoberCMS. They are able to gain access to any account by providing the boolean value ‘true’ in the HTTP request to retrieve forgotten password, which bypasses the password reset request. ","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.upguard.com/blog/how-australian-businesses-can-prepare-for-a-russian-cyberattack#:~:text=Many%20of%20these%20attacks%20are,family%20of%20malware%20called%20WhisperGate","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},{"id":"2","type":"data_property","x0":1349.7677819728851,"y0":757.9924736022949,"x1":1606,"y1":844,"payload":{"target":"PUBLICLY ACCESSIBLE"}},{"id":"4","type":"asset","x0":1157.1999740600586,"y0":1351.2000255584717,"x1":1407,"y1":1438,"payload":{"state":"account credentials"}},{"id":"5","type":"asset","x0":1510.8000030517578,"y0":1354.3999938964844,"x1":1760,"y1":1441,"payload":{"state":"sensitive information"}},{"id":"6","type":"action","x0":1498.7999267578125,"y0":919.9999809265137,"x1":1904,"y1":1219,"payload":{"name":"T1482 Domain Trust Discovery- CVE-2021-44228 Vulnerability","description":"(AKA Log4Shell and LogJam)- Known exploit in Log4j that  that takes advantage of Log4j's allowing requests to arbitrary LDAP and JNDI servers, allowing attackers to execute arbitrary Java code on a server or other computer, or leak sensitive information.","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.securityweek.com/ukraine-attacks-involved-exploitation-log4j-october-cms-vulnerabilities","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},{"id":"7","type":"action","x0":1827.1324768066406,"y0":1279.597396850586,"x1":2233,"y1":1578,"payload":{"name":"T1548 Abuse Elevation Control Mechanism- Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system. .001\tSetuid and Setgid\tAn adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges. .002\tBypass User Account Control\tAdversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. .003\tSudo and Sudo Caching\tAdversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges. .004\tElevated Execution with Prompt\tAdversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. T1134\tAccess Token Manipulation\tAdversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. .001\tToken Impersonation/Theft\tAdversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread. .002\tCreate Process with Token\tAdversaries may create a new process with a different token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas. .003\tMake and Impersonate Token\tAdversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread. .004\tParent PID Spoofing\tAdversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context. .005\tSID-History Injection\tAdversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens). T1531\tAccount Access Removal\tAdversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place. T1087\tAccount Discovery\tAdversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior. .001\tLocal Account\tAdversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior. .002\tDomain Account\tAdversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior. .003\tEmail Account\tAdversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs). .004\tCloud Account\tAdversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. T1098\tAccount Manipulation\tAdversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. .001\tAdditional Cloud Credentials\tAdversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment. .002\tAdditional Email Delegate Permissions\tAdversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. .003\tAdditional Cloud Roles\tAn adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, they may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins). .004\tSSH Authorized Keys\tAdversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config. .005\tDevice Registration\tAdversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance. T1583\tAcquire Infrastructure\tAdversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase. .001\tDomains\tAdversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free. .002\tDNS Server\tAdversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations. .003\tVirtual Private Server\tAdversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure. .004\tServer\tAdversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. .005\tBotnet\tAdversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS). .006\tWeb Services\tAdversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them. T1595\tActive Scanning\tAdversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction. .001\tScanning IP Blocks\tAdversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. .002\tVulnerability Scanning\tAdversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use. .003\tWordlist Scanning\tAdversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites). T1557\tAdversary-in-the-Middle\tAdversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions. .001\tLLMNR/NBT-NS Poisoning and SMB Relay\tBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. .002\tARP Cache Poisoning\tAdversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. .003\tDHCP Spoofing\tAdversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. T1071\tApplication Layer Protocol\tAdversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .001\tWeb Protocols\tAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .002\tFile Transfer Protocols\tAdversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .003\tMail Protocols\tAdversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .004\tDNS\tAdversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. T1010\tApplication Window Discovery\tAdversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger. T1560\tArchive Collected Data\tAn adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender. .001\tArchive via Utility\tAdversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport. .002\tArchive via Library\tAn adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data. .003\tArchive via Custom Method\tAn adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used. T1123\tAudio Capture\tAn adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information. T1119\tAutomated Collection\tOnce established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. T1020\tAutomated Exfiltration\tAdversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. .001\tTraffic Duplication\tAdversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device. T1197\tBITS Jobs\tAdversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations. T1547\tBoot or Logon Autostart Execution\tAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. .001\tRegistry Run Keys / Startup Folder\tAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. .002\tAuthentication Package\tAdversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. .003\tTime Providers\tAdversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. .004\tWinlogon Helper DLL\tAdversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon. .005\tSecurity Support Provider\tAdversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. .006\tKernel Modules and Extensions\tAdversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.  .007\tRe-opened Applications\tAdversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user’s next logon. .008\tLSASS Driver\tAdversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. .009\tShortcut Modification\tAdversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. .010\tPort Monitors\tAdversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. .012\tPrint Processors\tAdversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. .013\tXDG Autostart Entries\tAdversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the /etc/xdg/autostart or ~/.config/autostart directories and have a .desktop file extension. .014\tActive Setup\tAdversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level. .015\tLogin Items\tAdversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled. T1037\tBoot or Logon Initialization Scripts\tAdversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely. .001\tLogon Script (Windows)\tAdversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key. .002\tLogin Hook\tAdversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. .003\tNetwork Logon Script\tAdversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. .004\tRC Scripts\tAdversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify. .005\tStartup Items\tAdversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. T1217\tBrowser Bookmark Discovery\tAdversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure. T1176\tBrowser Extensions\tAdversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access. T1185\tBrowser Session Hijacking\tAdversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques. T1110\tBrute Force\tAdversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. .001\tPassword Guessing\tAdversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts. .002\tPassword Cracking\tAdversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further, adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices. .003\tPassword Spraying\tAdversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. .004\tCredential Stuffing\tAdversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. T1612\tBuild Image on Host\tAdversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it. T1115\tClipboard Data\tAdversaries may collect data stored in the clipboard from users copying information within or between applications. T1580\tCloud Infrastructure Discovery\tAn adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services. T1538\tCloud Service Dashboard\tAn adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports. T1526\tCloud Service Discovery\tAn adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. T1619\tCloud Storage Object Discovery\tAdversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure. T1059\tCommand and Scripting Interpreter\tAdversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell. .001\tPowerShell\tAdversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems). .002\tAppleScript\tAdversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. .003\tWindows Command Shell\tAdversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH. .004\tUnix Shell\tAdversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges. .005\tVisual Basic\tAdversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core. .006\tPython\tAdversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables. .007\tJavaScript\tAdversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser. .008\tNetwork Device CLI\tAdversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. T1092\tCommunication Through Removable Media\tAdversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access. T1586\tCompromise Accounts\tAdversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. .001\tSocial Media Accounts\tAdversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. .002\tEmail Accounts\tAdversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains). T1554\tCompromise Client Software Binary\tAdversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers. T1584\tCompromise Infrastructure- DDOS attacks","description":"Defacing Ukrainian government websites","timestamp":"","reference":"https://www.securityweek.com/ukraine-attacks-involved-exploitation-log4j-october-cms-vulnerabilities","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},{"id":"8","type":"asset","x0":1846.8435668945312,"y0":1684.5577087402344,"x1":2096,"y1":1771,"payload":{"state":"denial of service"}},{"id":"9","type":"action","x0":747.5946807861328,"y0":1864.7169342041016,"x1":1153,"y1":2163,"payload":{"name":"T1562 Impair Defenses- Detection evasion","description":"The in-memory code uses Living Off the Land Binaries (LOLBINs) evades detection and also performs anti-analysis techniques, as it will fail with certain monitoring tools. It also force disables/uninstalls Windows Defender.","timestamp":"","reference":"https://www.anvilogic.com/learn/land-binaries","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},{"id":"10","type":"action","x0":1242.355369567871,"y0":1588.7169799804688,"x1":1648,"y1":1887,"payload":{"name":"Deploying Whispergate malware","description":"The virus is deployed on target systems remotely using 'Impacket', a Python tool.","timestamp":"","reference":"https://stairwell.com/news/whispers-in-the-noise-microsoft-ukraine-whispergate/?fbclid=IwAR1RondM0hGLfAIRIeUwSO2A1c2Wd49yao-Tf6b-WEPf0-ElAn0BNphc_Co","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},{"id":"11","type":"asset","x0":1318.7396850585938,"y0":1972.083267211914,"x1":1568,"y1":2059,"payload":{"state":"target system control"}},{"id":"12","type":"action","x0":1238.4900970458984,"y0":2121.049560546875,"x1":1644,"y1":2420,"payload":{"name":"T1485 Data Destruction- Stage 1: Overwriting MBR","description":"The attacker overwrites Master Boot Records (MBR) with a fake ransom note. Since the MBR is overwritten, it is not possible to recover it. the malware overwrites the MBR with 512 bytes, powering down the infected system, and prevents it from booting back up.","timestamp":"","reference":"https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"YES"}},{"id":"17","type":"asset","x0":1313.6069641113281,"y0":2496.7169494628906,"x1":1563,"y1":2583,"payload":{"state":"overwriten MBR"}},{"id":"18","type":"action","x0":1796.1192321777344,"y0":2481.5103073120117,"x1":2202,"y1":2780,"payload":{"name":"T1561 Disk Wipe- Disk wipe","description":"Disk wiper injected in memory. Corrupts files with certain extensions and in certain directories by overwriting them with 0xCC bytes. After overwriting and corrupting files, the malware renames the files with a random four-byte extension.","timestamp":"","reference":"https://www.picussecurity.com/resource/blog/dev-0586-apt-group-in-whispergate-attack-targeting-ukraine","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},{"id":"19","type":"data_property","x0":936.3937072753906,"y0":2497.849578857422,"x1":1193,"y1":2584,"payload":{"target":"base64 encoded"}},{"id":"20","type":"asset","x0":1875.5833053588867,"y0":2864.6864624023438,"x1":2125,"y1":2951,"payload":{"state":"files corrupted"}},{"id":"21","type":"data_property","x0":2291.7444763183594,"y0":2585.1255798339844,"x1":2548,"y1":2672,"payload":{"target":"base64 encoded powershell commands"}},{"id":"24","type":"action","x0":1793.4897994995117,"y0":1867.979637145996,"x1":2199,"y1":2166,"payload":{"name":"T1105 Ingress Tool Transfer- Stage 2: Ingress Tool Transfer","description":"Download file corruptor payload from Discord channel (hardcoded in stage2.exe)","timestamp":"","reference":"https://www.picussecurity.com/resource/blog/dev-0586-apt-group-in-whispergate-attack-targeting-ukraine","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},{"id":"25","type":"asset","x0":1875.1528930664062,"y0":2277.40478515625,"x1":2125,"y1":2364,"payload":{"state":"file corruptor downloaded"}},{"id":"26","type":"asset","x0":1045.1251831054688,"y0":756.440185546875,"x1":1295,"y1":843,"payload":{"state":"https://octobercms.com/"}},{"id":"27","type":"asset","x0":1657.9545288085938,"y0":758.3350524902344,"x1":1907,"y1":845,"payload":{"state":"https://logging.apache.org/log4j/2.x/download.html"}},{"id":"28","type":"asset","x0":1961.4884948730469,"y0":1115.2515563964844,"x1":2211,"y1":1202,"payload":{"state":"access to government website"}}],"edges":[{"id":"1.2","sourceId":"1","targetId":"2","source":{"id":"1","type":"action","x0":1035.5999970436096,"y0":916.9999961853027,"x1":1441,"y1":1216,"payload":{"name":"T1134 Access Token Manipulation: CVE-2021-32648 Vulnerability","description":"The attacker accesses OctoberCMS. They are able to gain access to any account by providing the boolean value ‘true’ in the HTTP request to retrieve forgotten password, which bypasses the password reset request. ","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.upguard.com/blog/how-australian-businesses-can-prepare-for-a-russian-cyberattack#:~:text=Many%20of%20these%20attacks%20are,family%20of%20malware%20called%20WhisperGate","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"2","type":"data_property","x0":1349.7677819728851,"y0":757.9924736022949,"x1":1606,"y1":844,"payload":{"target":"PUBLICLY ACCESSIBLE"}},"type":"data_property_type","payload":{"type":"state"}},{"id":"1.4","sourceId":"1","targetId":"4","source":{"id":"1","type":"action","x0":1035.5999970436096,"y0":916.9999961853027,"x1":1441,"y1":1216,"payload":{"name":"T1134 Access Token Manipulation: CVE-2021-32648 Vulnerability","description":"The attacker accesses OctoberCMS. They are able to gain access to any account by providing the boolean value ‘true’ in the HTTP request to retrieve forgotten password, which bypasses the password reset request. ","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.upguard.com/blog/how-australian-businesses-can-prepare-for-a-russian-cyberattack#:~:text=Many%20of%20these%20attacks%20are,family%20of%20malware%20called%20WhisperGate","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"4","type":"asset","x0":1157.1999740600586,"y0":1351.2000255584717,"x1":1407,"y1":1438,"payload":{"state":"account credentials"}},"type":"relationship","payload":{"type":"provides"}},{"id":"6.5","sourceId":"6","targetId":"5","source":{"id":"6","type":"action","x0":1498.7999267578125,"y0":919.9999809265137,"x1":1904,"y1":1219,"payload":{"name":"T1482 Domain Trust Discovery- CVE-2021-44228 Vulnerability","description":"(AKA Log4Shell and LogJam)- Known exploit in Log4j that  that takes advantage of Log4j's allowing requests to arbitrary LDAP and JNDI servers, allowing attackers to execute arbitrary Java code on a server or other computer, or leak sensitive information.","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.securityweek.com/ukraine-attacks-involved-exploitation-log4j-october-cms-vulnerabilities","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"5","type":"asset","x0":1510.8000030517578,"y0":1354.3999938964844,"x1":1760,"y1":1441,"payload":{"state":"sensitive information"}},"type":"relationship","payload":{"type":"provides"}},{"id":"6.2","sourceId":"6","targetId":"2","source":{"id":"6","type":"action","x0":1498.7999267578125,"y0":919.9999809265137,"x1":1904,"y1":1219,"payload":{"name":"T1482 Domain Trust Discovery- CVE-2021-44228 Vulnerability","description":"(AKA Log4Shell and LogJam)- Known exploit in Log4j that  that takes advantage of Log4j's allowing requests to arbitrary LDAP and JNDI servers, allowing attackers to execute arbitrary Java code on a server or other computer, or leak sensitive information.","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.securityweek.com/ukraine-attacks-involved-exploitation-log4j-october-cms-vulnerabilities","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"2","type":"data_property","x0":1349.7677819728851,"y0":757.9924736022949,"x1":1606,"y1":844,"payload":{"target":"PUBLICLY ACCESSIBLE"}},"type":"data_property_type","payload":{"type":"state"}},{"id":"7.8","sourceId":"7","targetId":"8","source":{"id":"7","type":"action","x0":1827.1324768066406,"y0":1279.597396850586,"x1":2233,"y1":1578,"payload":{"name":"T1548 Abuse Elevation Control Mechanism- Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system. .001\tSetuid and Setgid\tAn adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges. .002\tBypass User Account Control\tAdversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. .003\tSudo and Sudo Caching\tAdversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges. .004\tElevated Execution with Prompt\tAdversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. T1134\tAccess Token Manipulation\tAdversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. .001\tToken Impersonation/Theft\tAdversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread. .002\tCreate Process with Token\tAdversaries may create a new process with a different token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas. .003\tMake and Impersonate Token\tAdversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread. .004\tParent PID Spoofing\tAdversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context. .005\tSID-History Injection\tAdversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens). T1531\tAccount Access Removal\tAdversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place. T1087\tAccount Discovery\tAdversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior. .001\tLocal Account\tAdversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior. .002\tDomain Account\tAdversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior. .003\tEmail Account\tAdversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs). .004\tCloud Account\tAdversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. T1098\tAccount Manipulation\tAdversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. .001\tAdditional Cloud Credentials\tAdversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment. .002\tAdditional Email Delegate Permissions\tAdversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. .003\tAdditional Cloud Roles\tAn adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, they may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins). .004\tSSH Authorized Keys\tAdversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config. .005\tDevice Registration\tAdversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance. T1583\tAcquire Infrastructure\tAdversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase. .001\tDomains\tAdversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free. .002\tDNS Server\tAdversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations. .003\tVirtual Private Server\tAdversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure. .004\tServer\tAdversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. .005\tBotnet\tAdversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS). .006\tWeb Services\tAdversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them. T1595\tActive Scanning\tAdversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction. .001\tScanning IP Blocks\tAdversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. .002\tVulnerability Scanning\tAdversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use. .003\tWordlist Scanning\tAdversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites). T1557\tAdversary-in-the-Middle\tAdversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions. .001\tLLMNR/NBT-NS Poisoning and SMB Relay\tBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. .002\tARP Cache Poisoning\tAdversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. .003\tDHCP Spoofing\tAdversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. T1071\tApplication Layer Protocol\tAdversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .001\tWeb Protocols\tAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .002\tFile Transfer Protocols\tAdversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .003\tMail Protocols\tAdversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .004\tDNS\tAdversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. T1010\tApplication Window Discovery\tAdversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger. T1560\tArchive Collected Data\tAn adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender. .001\tArchive via Utility\tAdversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport. .002\tArchive via Library\tAn adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data. .003\tArchive via Custom Method\tAn adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used. T1123\tAudio Capture\tAn adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information. T1119\tAutomated Collection\tOnce established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. T1020\tAutomated Exfiltration\tAdversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. .001\tTraffic Duplication\tAdversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device. T1197\tBITS Jobs\tAdversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations. T1547\tBoot or Logon Autostart Execution\tAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. .001\tRegistry Run Keys / Startup Folder\tAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. .002\tAuthentication Package\tAdversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. .003\tTime Providers\tAdversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. .004\tWinlogon Helper DLL\tAdversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon. .005\tSecurity Support Provider\tAdversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. .006\tKernel Modules and Extensions\tAdversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.  .007\tRe-opened Applications\tAdversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user’s next logon. .008\tLSASS Driver\tAdversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. .009\tShortcut Modification\tAdversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. .010\tPort Monitors\tAdversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. .012\tPrint Processors\tAdversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. .013\tXDG Autostart Entries\tAdversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the /etc/xdg/autostart or ~/.config/autostart directories and have a .desktop file extension. .014\tActive Setup\tAdversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level. .015\tLogin Items\tAdversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled. T1037\tBoot or Logon Initialization Scripts\tAdversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely. .001\tLogon Script (Windows)\tAdversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key. .002\tLogin Hook\tAdversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. .003\tNetwork Logon Script\tAdversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. .004\tRC Scripts\tAdversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify. .005\tStartup Items\tAdversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. T1217\tBrowser Bookmark Discovery\tAdversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure. T1176\tBrowser Extensions\tAdversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access. T1185\tBrowser Session Hijacking\tAdversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques. T1110\tBrute Force\tAdversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. .001\tPassword Guessing\tAdversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts. .002\tPassword Cracking\tAdversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further, adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices. .003\tPassword Spraying\tAdversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. .004\tCredential Stuffing\tAdversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. T1612\tBuild Image on Host\tAdversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it. T1115\tClipboard Data\tAdversaries may collect data stored in the clipboard from users copying information within or between applications. T1580\tCloud Infrastructure Discovery\tAn adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services. T1538\tCloud Service Dashboard\tAn adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports. T1526\tCloud Service Discovery\tAn adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. T1619\tCloud Storage Object Discovery\tAdversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure. T1059\tCommand and Scripting Interpreter\tAdversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell. .001\tPowerShell\tAdversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems). .002\tAppleScript\tAdversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. .003\tWindows Command Shell\tAdversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH. .004\tUnix Shell\tAdversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges. .005\tVisual Basic\tAdversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core. .006\tPython\tAdversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables. .007\tJavaScript\tAdversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser. .008\tNetwork Device CLI\tAdversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. T1092\tCommunication Through Removable Media\tAdversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access. T1586\tCompromise Accounts\tAdversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. .001\tSocial Media Accounts\tAdversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. .002\tEmail Accounts\tAdversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains). T1554\tCompromise Client Software Binary\tAdversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers. T1584\tCompromise Infrastructure- DDOS attacks","description":"Defacing Ukrainian government websites","timestamp":"","reference":"https://www.securityweek.com/ukraine-attacks-involved-exploitation-log4j-october-cms-vulnerabilities","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"8","type":"asset","x0":1846.8435668945312,"y0":1684.5577087402344,"x1":2096,"y1":1771,"payload":{"state":"denial of service"}},"type":"relationship","payload":{"type":"provides"}},{"id":"4.10","sourceId":"4","targetId":"10","source":{"id":"4","type":"asset","x0":1157.1999740600586,"y0":1351.2000255584717,"x1":1407,"y1":1438,"payload":{"state":"account credentials"}},"target":{"id":"10","type":"action","x0":1242.355369567871,"y0":1588.7169799804688,"x1":1648,"y1":1887,"payload":{"name":"Deploying Whispergate malware","description":"The virus is deployed on target systems remotely using 'Impacket', a Python tool.","timestamp":"","reference":"https://stairwell.com/news/whispers-in-the-noise-microsoft-ukraine-whispergate/?fbclid=IwAR1RondM0hGLfAIRIeUwSO2A1c2Wd49yao-Tf6b-WEPf0-ElAn0BNphc_Co","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}},{"id":"5.10","sourceId":"5","targetId":"10","source":{"id":"5","type":"asset","x0":1510.8000030517578,"y0":1354.3999938964844,"x1":1760,"y1":1441,"payload":{"state":"sensitive information"}},"target":{"id":"10","type":"action","x0":1242.355369567871,"y0":1588.7169799804688,"x1":1648,"y1":1887,"payload":{"name":"Deploying Whispergate malware","description":"The virus is deployed on target systems remotely using 'Impacket', a Python tool.","timestamp":"","reference":"https://stairwell.com/news/whispers-in-the-noise-microsoft-ukraine-whispergate/?fbclid=IwAR1RondM0hGLfAIRIeUwSO2A1c2Wd49yao-Tf6b-WEPf0-ElAn0BNphc_Co","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}},{"id":"10.11","sourceId":"10","targetId":"11","source":{"id":"10","type":"action","x0":1242.355369567871,"y0":1588.7169799804688,"x1":1648,"y1":1887,"payload":{"name":"Deploying Whispergate malware","description":"The virus is deployed on target systems remotely using 'Impacket', a Python tool.","timestamp":"","reference":"https://stairwell.com/news/whispers-in-the-noise-microsoft-ukraine-whispergate/?fbclid=IwAR1RondM0hGLfAIRIeUwSO2A1c2Wd49yao-Tf6b-WEPf0-ElAn0BNphc_Co","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"11","type":"asset","x0":1318.7396850585938,"y0":1972.083267211914,"x1":1568,"y1":2059,"payload":{"state":"target system control"}},"type":"relationship","payload":{"type":""}},{"id":"11.12","sourceId":"11","targetId":"12","source":{"id":"11","type":"asset","x0":1318.7396850585938,"y0":1972.083267211914,"x1":1568,"y1":2059,"payload":{"state":"target system control"}},"target":{"id":"12","type":"action","x0":1238.4900970458984,"y0":2121.049560546875,"x1":1644,"y1":2420,"payload":{"name":"T1485 Data Destruction- Stage 1: Overwriting MBR","description":"The attacker overwrites Master Boot Records (MBR) with a fake ransom note. Since the MBR is overwritten, it is not possible to recover it. the malware overwrites the MBR with 512 bytes, powering down the infected system, and prevents it from booting back up.","timestamp":"","reference":"https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"YES"}},"type":"relationship","payload":{"type":"requuired-by"}},{"id":"9.11","sourceId":"9","targetId":"11","source":{"id":"9","type":"action","x0":747.5946807861328,"y0":1864.7169342041016,"x1":1153,"y1":2163,"payload":{"name":"T1562 Impair Defenses- Detection evasion","description":"The in-memory code uses Living Off the Land Binaries (LOLBINs) evades detection and also performs anti-analysis techniques, as it will fail with certain monitoring tools. It also force disables/uninstalls Windows Defender.","timestamp":"","reference":"https://www.anvilogic.com/learn/land-binaries","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"11","type":"asset","x0":1318.7396850585938,"y0":1972.083267211914,"x1":1568,"y1":2059,"payload":{"state":"target system control"}},"type":"relationship","payload":{"type":"provides"}},{"id":"12.17","sourceId":"12","targetId":"17","source":{"id":"12","type":"action","x0":1238.4900970458984,"y0":2121.049560546875,"x1":1644,"y1":2420,"payload":{"name":"T1485 Data Destruction- Stage 1: Overwriting MBR","description":"The attacker overwrites Master Boot Records (MBR) with a fake ransom note. Since the MBR is overwritten, it is not possible to recover it. the malware overwrites the MBR with 512 bytes, powering down the infected system, and prevents it from booting back up.","timestamp":"","reference":"https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"YES"}},"target":{"id":"17","type":"asset","x0":1313.6069641113281,"y0":2496.7169494628906,"x1":1563,"y1":2583,"payload":{"state":"overwriten MBR"}},"type":"relationship","payload":{"type":"provides"}},{"id":"17.19","sourceId":"17","targetId":"19","source":{"id":"17","type":"asset","x0":1313.6069641113281,"y0":2496.7169494628906,"x1":1563,"y1":2583,"payload":{"state":"overwriten MBR"}},"target":{"id":"19","type":"data_property","x0":936.3937072753906,"y0":2497.849578857422,"x1":1193,"y1":2584,"payload":{"target":"base64 encoded"}},"type":"data_property_type","payload":{"type":"state"}},{"id":"18.20","sourceId":"18","targetId":"20","source":{"id":"18","type":"action","x0":1796.1192321777344,"y0":2481.5103073120117,"x1":2202,"y1":2780,"payload":{"name":"T1561 Disk Wipe- Disk wipe","description":"Disk wiper injected in memory. Corrupts files with certain extensions and in certain directories by overwriting them with 0xCC bytes. After overwriting and corrupting files, the malware renames the files with a random four-byte extension.","timestamp":"","reference":"https://www.picussecurity.com/resource/blog/dev-0586-apt-group-in-whispergate-attack-targeting-ukraine","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"20","type":"asset","x0":1875.5833053588867,"y0":2864.6864624023438,"x1":2125,"y1":2951,"payload":{"state":"files corrupted"}},"type":"relationship","payload":{"type":"provides"}},{"id":"24.25","sourceId":"24","targetId":"25","source":{"id":"24","type":"action","x0":1793.4897994995117,"y0":1867.979637145996,"x1":2199,"y1":2166,"payload":{"name":"T1105 Ingress Tool Transfer- Stage 2: Ingress Tool Transfer","description":"Download file corruptor payload from Discord channel (hardcoded in stage2.exe)","timestamp":"","reference":"https://www.picussecurity.com/resource/blog/dev-0586-apt-group-in-whispergate-attack-targeting-ukraine","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"25","type":"asset","x0":1875.1528930664062,"y0":2277.40478515625,"x1":2125,"y1":2364,"payload":{"state":"file corruptor downloaded"}},"type":"relationship","payload":{"type":"provides"}},{"id":"25.18","sourceId":"25","targetId":"18","source":{"id":"25","type":"asset","x0":1875.1528930664062,"y0":2277.40478515625,"x1":2125,"y1":2364,"payload":{"state":"file corruptor downloaded"}},"target":{"id":"18","type":"action","x0":1796.1192321777344,"y0":2481.5103073120117,"x1":2202,"y1":2780,"payload":{"name":"T1561 Disk Wipe- Disk wipe","description":"Disk wiper injected in memory. Corrupts files with certain extensions and in certain directories by overwriting them with 0xCC bytes. After overwriting and corrupting files, the malware renames the files with a random four-byte extension.","timestamp":"","reference":"https://www.picussecurity.com/resource/blog/dev-0586-apt-group-in-whispergate-attack-targeting-ukraine","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}},{"id":"18.21","sourceId":"18","targetId":"21","source":{"id":"18","type":"action","x0":1796.1192321777344,"y0":2481.5103073120117,"x1":2202,"y1":2780,"payload":{"name":"T1561 Disk Wipe- Disk wipe","description":"Disk wiper injected in memory. Corrupts files with certain extensions and in certain directories by overwriting them with 0xCC bytes. After overwriting and corrupting files, the malware renames the files with a random four-byte extension.","timestamp":"","reference":"https://www.picussecurity.com/resource/blog/dev-0586-apt-group-in-whispergate-attack-targeting-ukraine","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"target":{"id":"21","type":"data_property","x0":2291.7444763183594,"y0":2585.1255798339844,"x1":2548,"y1":2672,"payload":{"target":"base64 encoded powershell commands"}},"type":"data_property_type","payload":{"type":"state"}},{"id":"11.24","sourceId":"11","targetId":"24","source":{"id":"11","type":"asset","x0":1318.7396850585938,"y0":1972.083267211914,"x1":1568,"y1":2059,"payload":{"state":"target system control"}},"target":{"id":"24","type":"action","x0":1793.4897994995117,"y0":1867.979637145996,"x1":2199,"y1":2166,"payload":{"name":"T1105 Ingress Tool Transfer- Stage 2: Ingress Tool Transfer","description":"Download file corruptor payload from Discord channel (hardcoded in stage2.exe)","timestamp":"","reference":"https://www.picussecurity.com/resource/blog/dev-0586-apt-group-in-whispergate-attack-targeting-ukraine","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}},{"id":"26.1","sourceId":"26","targetId":"1","source":{"id":"26","type":"asset","x0":1045.1251831054688,"y0":756.440185546875,"x1":1295,"y1":843,"payload":{"state":"https://octobercms.com/"}},"target":{"id":"1","type":"action","x0":1035.5999970436096,"y0":916.9999961853027,"x1":1441,"y1":1216,"payload":{"name":"T1134 Access Token Manipulation: CVE-2021-32648 Vulnerability","description":"The attacker accesses OctoberCMS. They are able to gain access to any account by providing the boolean value ‘true’ in the HTTP request to retrieve forgotten password, which bypasses the password reset request. ","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.upguard.com/blog/how-australian-businesses-can-prepare-for-a-russian-cyberattack#:~:text=Many%20of%20these%20attacks%20are,family%20of%20malware%20called%20WhisperGate","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}},{"id":"8.10","sourceId":"8","targetId":"10","source":{"id":"8","type":"asset","x0":1846.8435668945312,"y0":1684.5577087402344,"x1":2096,"y1":1771,"payload":{"state":"denial of service"}},"target":{"id":"10","type":"action","x0":1242.355369567871,"y0":1588.7169799804688,"x1":1648,"y1":1887,"payload":{"name":"Deploying Whispergate malware","description":"The virus is deployed on target systems remotely using 'Impacket', a Python tool.","timestamp":"","reference":"https://stairwell.com/news/whispers-in-the-noise-microsoft-ukraine-whispergate/?fbclid=IwAR1RondM0hGLfAIRIeUwSO2A1c2Wd49yao-Tf6b-WEPf0-ElAn0BNphc_Co","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}},{"id":"27.6","sourceId":"27","targetId":"6","source":{"id":"27","type":"asset","x0":1657.9545288085938,"y0":758.3350524902344,"x1":1907,"y1":845,"payload":{"state":"https://logging.apache.org/log4j/2.x/download.html"}},"target":{"id":"6","type":"action","x0":1498.7999267578125,"y0":919.9999809265137,"x1":1904,"y1":1219,"payload":{"name":"T1482 Domain Trust Discovery- CVE-2021-44228 Vulnerability","description":"(AKA Log4Shell and LogJam)- Known exploit in Log4j that  that takes advantage of Log4j's allowing requests to arbitrary LDAP and JNDI servers, allowing attackers to execute arbitrary Java code on a server or other computer, or leak sensitive information.","timestamp":"2022-01-14T00:00:00.000Z","reference":"https://www.securityweek.com/ukraine-attacks-involved-exploitation-log4j-october-cms-vulnerabilities","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}},{"id":"28.7","sourceId":"28","targetId":"7","source":{"id":"28","type":"asset","x0":1961.4884948730469,"y0":1115.2515563964844,"x1":2211,"y1":1202,"payload":{"state":"access to government website"}},"target":{"id":"7","type":"action","x0":1827.1324768066406,"y0":1279.597396850586,"x1":2233,"y1":1578,"payload":{"name":"T1548 Abuse Elevation Control Mechanism- Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system. .001\tSetuid and Setgid\tAn adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges. .002\tBypass User Account Control\tAdversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. .003\tSudo and Sudo Caching\tAdversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges. .004\tElevated Execution with Prompt\tAdversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. T1134\tAccess Token Manipulation\tAdversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. .001\tToken Impersonation/Theft\tAdversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread. .002\tCreate Process with Token\tAdversaries may create a new process with a different token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas. .003\tMake and Impersonate Token\tAdversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread. .004\tParent PID Spoofing\tAdversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context. .005\tSID-History Injection\tAdversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens). T1531\tAccount Access Removal\tAdversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place. T1087\tAccount Discovery\tAdversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior. .001\tLocal Account\tAdversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior. .002\tDomain Account\tAdversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior. .003\tEmail Account\tAdversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs). .004\tCloud Account\tAdversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. T1098\tAccount Manipulation\tAdversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. .001\tAdditional Cloud Credentials\tAdversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment. .002\tAdditional Email Delegate Permissions\tAdversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. .003\tAdditional Cloud Roles\tAn adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, they may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins). .004\tSSH Authorized Keys\tAdversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config. .005\tDevice Registration\tAdversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance. T1583\tAcquire Infrastructure\tAdversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase. .001\tDomains\tAdversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free. .002\tDNS Server\tAdversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations. .003\tVirtual Private Server\tAdversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure. .004\tServer\tAdversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations. .005\tBotnet\tAdversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS). .006\tWeb Services\tAdversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them. T1595\tActive Scanning\tAdversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction. .001\tScanning IP Blocks\tAdversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. .002\tVulnerability Scanning\tAdversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use. .003\tWordlist Scanning\tAdversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites). T1557\tAdversary-in-the-Middle\tAdversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions. .001\tLLMNR/NBT-NS Poisoning and SMB Relay\tBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. .002\tARP Cache Poisoning\tAdversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. .003\tDHCP Spoofing\tAdversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. T1071\tApplication Layer Protocol\tAdversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .001\tWeb Protocols\tAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .002\tFile Transfer Protocols\tAdversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .003\tMail Protocols\tAdversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. .004\tDNS\tAdversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. T1010\tApplication Window Discovery\tAdversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger. T1560\tArchive Collected Data\tAn adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender. .001\tArchive via Utility\tAdversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport. .002\tArchive via Library\tAn adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data. .003\tArchive via Custom Method\tAn adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used. T1123\tAudio Capture\tAn adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information. T1119\tAutomated Collection\tOnce established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. T1020\tAutomated Exfiltration\tAdversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. .001\tTraffic Duplication\tAdversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device. T1197\tBITS Jobs\tAdversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations. T1547\tBoot or Logon Autostart Execution\tAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. .001\tRegistry Run Keys / Startup Folder\tAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. .002\tAuthentication Package\tAdversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. .003\tTime Providers\tAdversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. .004\tWinlogon Helper DLL\tAdversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon. .005\tSecurity Support Provider\tAdversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. .006\tKernel Modules and Extensions\tAdversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.  .007\tRe-opened Applications\tAdversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user’s next logon. .008\tLSASS Driver\tAdversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. .009\tShortcut Modification\tAdversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. .010\tPort Monitors\tAdversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. .012\tPrint Processors\tAdversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. .013\tXDG Autostart Entries\tAdversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the /etc/xdg/autostart or ~/.config/autostart directories and have a .desktop file extension. .014\tActive Setup\tAdversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level. .015\tLogin Items\tAdversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled. T1037\tBoot or Logon Initialization Scripts\tAdversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely. .001\tLogon Script (Windows)\tAdversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key. .002\tLogin Hook\tAdversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. .003\tNetwork Logon Script\tAdversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. .004\tRC Scripts\tAdversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify. .005\tStartup Items\tAdversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. T1217\tBrowser Bookmark Discovery\tAdversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure. T1176\tBrowser Extensions\tAdversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access. T1185\tBrowser Session Hijacking\tAdversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques. T1110\tBrute Force\tAdversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. .001\tPassword Guessing\tAdversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts. .002\tPassword Cracking\tAdversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further, adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices. .003\tPassword Spraying\tAdversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. .004\tCredential Stuffing\tAdversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. T1612\tBuild Image on Host\tAdversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it. T1115\tClipboard Data\tAdversaries may collect data stored in the clipboard from users copying information within or between applications. T1580\tCloud Infrastructure Discovery\tAn adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services. T1538\tCloud Service Dashboard\tAn adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports. T1526\tCloud Service Discovery\tAn adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. T1619\tCloud Storage Object Discovery\tAdversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure. T1059\tCommand and Scripting Interpreter\tAdversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell. .001\tPowerShell\tAdversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems). .002\tAppleScript\tAdversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. .003\tWindows Command Shell\tAdversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH. .004\tUnix Shell\tAdversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges. .005\tVisual Basic\tAdversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core. .006\tPython\tAdversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables. .007\tJavaScript\tAdversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser. .008\tNetwork Device CLI\tAdversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. T1092\tCommunication Through Removable Media\tAdversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access. T1586\tCompromise Accounts\tAdversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. .001\tSocial Media Accounts\tAdversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. .002\tEmail Accounts\tAdversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains). T1554\tCompromise Client Software Binary\tAdversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers. T1584\tCompromise Infrastructure- DDOS attacks","description":"Defacing Ukrainian government websites","timestamp":"","reference":"https://www.securityweek.com/ukraine-attacks-involved-exploitation-log4j-october-cms-vulnerabilities","succeeded":1,"confidence":1,"logic_operator_language":"","logic_operator":"AND"}},"type":"relationship","payload":{"type":"required-by"}}],"schema":{"lists":{},"nodes":{"action":{"color":"#637bc9","outline":"#708ce6","subtype":null,"fields":{"name":{"type":"string","default":"","required":true},"description":{"type":"string","default":"","required":true},"timestamp":{"type":"datetime","default":""},"reference":{"type":"string","default":""},"succeeded":{"type":"number","default":0,"range":{"min":0,"max":1}},"confidence":{"type":"number","default":0,"range":{"min":0,"max":1}},"logic_operator_language":{"type":"string","default":""},"logic_operator":{"type":"string","default":"","required":true}}},"asset":{"color":"#c26130","outline":"#e57339","subtype":null,"fields":{"state":{"type":"string","default":""}}},"object_property_target":{"color":"#b62020","outline":"#d62727","subtype":null,"fields":{"target":{"type":"string","default":"","required":true}}},"data_property":{"color":"#31347c","outline":"#4246a6","subtype":null,"fields":{"target":{"type":"string","default":"","required":true}}}},"edges":{"relationship":{"color":"#4d4d4d","outline":"#696969","hasArrow":true,"hasDash":false,"fields":{"type":{"type":"string","default":"","required":true}}},"object_property_type":{"color":"#099","outline":"#00b8b8","hasArrow":true,"hasDash":false,"fields":{"type":{"type":"string","default":"","required":true}}},"data_property_type":{"color":"#31347c","outline":"#4246a6","hasArrow":true,"hasDash":false,"fields":{"type":{"type":"string","default":"","required":true}}}},"edgeRules":[{"source":"action","target":"asset","type":"relationship"},{"source":"action","target":"data_property","type":"data_property_type"},{"source":"action","target":"object_property_target","type":"object_property_type"},{"source":"asset","target":"action","type":"relationship"},{"source":"asset","target":"data_property","type":"data_property_type"},{"source":"asset","target":"object_property_target","type":"object_property_type"},{"source":"asset","target":"asset","type":"object_property_type"}]}}